--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/local/bin/cg_annotate cachegrind.out.2918
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         8388608 B, 64 B, 16-way associative
Command:          ./exec
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir______________ I1mr__________ ILmr__________ Dr_____________ D1mr__________ DLmr__________ Dw_____________ D1mw________ DLmw________ 

183,513 (100.0%) 2,304 (100.0%) 2,191 (100.0%) 42,887 (100.0%) 2,447 (100.0%) 1,356 (100.0%) 16,280 (100.0%) 636 (100.0%) 591 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir___________________ I1mr______________ ILmr______________ Dr___________________ D1mr______________ DLmr______________ Dw__________________ D1mw______________ DLmw______________  file:function

< 50,536 (27.5%, 27.5%)  35  (1.5%,  1.5%)  35  (1.6%,  1.6%) 14,353 (33.5%, 33.5%) 339 (13.9%, 13.9%) 287 (21.2%, 21.2%) 6,367 (39.1%, 39.1%)  18  (2.8%,  2.8%)   5  (0.8%,  0.8%)  ./elf/./elf/dl-lookup.c:
  24,371 (13.3%)         18  (0.8%)         18  (0.8%)         8,188 (19.1%)        194  (7.9%)        159 (11.7%)        3,432 (21.1%)          8  (1.3%)          3  (0.5%)           do_lookup_x
  21,037 (11.5%)         11  (0.5%)         11  (0.5%)         4,461 (10.4%)         97  (4.0%)         88  (6.5%)        2,353 (14.5%)          8  (1.3%)          1  (0.2%)           _dl_lookup_symbol_x
   5,128  (2.8%)          6  (0.3%)          6  (0.3%)         1,704  (4.0%)         48  (2.0%)         40  (2.9%)          582  (3.6%)          2  (0.3%)          1  (0.2%)           check_match

< 26,299 (14.3%, 41.9%)  12  (0.5%,  2.0%)  12  (0.5%,  2.1%)  4,795 (11.2%, 44.6%)  99  (4.0%, 17.9%)  79  (5.8%, 27.0%)    59  (0.4%, 39.5%)   1  (0.2%,  3.0%)   1  (0.2%,  1.0%)  ./elf/./elf/dl-tunables.c:
  25,377 (13.8%)          5  (0.2%)          5  (0.2%)         4,628 (10.8%)         62  (2.5%)         62  (4.6%)            6  (0.0%)          1  (0.2%)          1  (0.2%)           __GI___tunables_init
     677  (0.4%)          3  (0.1%)          3  (0.1%)           132  (0.3%)         37  (1.5%)         17  (1.3%)           33  (0.2%)          0                  0                   __tunable_get_val
     245  (0.1%)          4  (0.2%)          4  (0.2%)            35  (0.1%)          0                  0                   20  (0.1%)          0                  0                   __GI___tunable_set_val

< 18,911 (10.3%, 52.2%)  26  (1.1%,  3.2%)  26  (1.2%,  3.3%)  4,840 (11.3%, 55.9%) 459 (18.8%, 36.7%) 438 (32.3%, 59.3%) 2,207 (13.6%, 53.0%) 268 (42.1%, 45.1%) 258 (43.7%, 44.7%)  ./elf/../sysdeps/x86_64/dl-machine.h:
  18,025  (9.8%)         21  (0.9%)         21  (1.0%)         4,521 (10.5%)        415 (17.0%)        394 (29.1%)        2,056 (12.6%)        246 (38.7%)        236 (39.9%)           _dl_relocate_object
     883  (0.5%)          5  (0.2%)          5  (0.2%)           319  (0.7%)         44  (1.8%)         44  (3.2%)          148  (0.9%)         22  (3.5%)         22  (3.7%)           _dl_start

< 16,918  (9.2%, 61.4%) 864 (37.5%, 40.7%) 863 (39.4%, 42.7%)  4,220  (9.8%, 65.8%) 816 (33.3%, 70.0%)   8  (0.6%, 59.9%)   886  (5.4%, 58.5%)   1  (0.2%, 45.3%)   0  (0.0%, 44.7%)  /home/spectre/Documents/The-UNSHARED-Spectre/PrimeProbe/primeprobe.c:
  16,429  (9.0%)        847 (36.8%)        847 (38.7%)         4,082  (9.5%)        816 (33.3%)          8  (0.6%)          818  (5.0%)          0                  0                   prime_cache_set
     489  (0.3%)         17  (0.7%)         16  (0.7%)           138  (0.3%)          0                  0                   68  (0.4%)          1  (0.2%)          0                   main

< 10,830  (5.9%, 67.3%)  19  (0.8%, 41.5%)  19  (0.9%, 43.6%)  2,563  (6.0%, 71.7%) 279 (11.4%, 81.4%) 264 (19.5%, 79.4%)   375  (2.3%, 60.8%)   3  (0.5%, 45.8%)   0  (0.0%, 44.7%)  ./elf/./elf/do-rel.h:
  10,015  (5.5%)         17  (0.7%)         17  (0.8%)         2,398  (5.6%)        259 (10.6%)        244 (18.0%)          375  (2.3%)          3  (0.5%)          0                   _dl_relocate_object
     815  (0.4%)          2  (0.1%)          2  (0.1%)           165  (0.4%)         20  (0.8%)         20  (1.5%)            0                  0                  0                   _dl_start

<  6,057  (3.3%, 70.6%)  90  (3.9%, 45.4%)  51  (2.3%, 45.9%)  1,422  (3.3%, 75.1%)  10  (0.4%, 81.8%)   7  (0.5%, 79.9%)   881  (5.4%, 66.2%)   0  (0.0%, 45.8%)   0  (0.0%, 44.7%)  ./stdio-common/./stdio-common/vfprintf-internal.c:__vfprintf_internal

<  5,897  (3.2%, 73.8%)  44  (1.9%, 47.3%)  43  (2.0%, 47.9%)  1,184  (2.8%, 77.8%)  51  (2.1%, 83.9%)  40  (2.9%, 82.8%)     0  (0.0%, 66.2%)   0  (0.0%, 45.8%)   0  (0.0%, 44.7%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp

<  5,442  (3.0%, 76.8%)  43  (1.9%, 49.2%)  27  (1.2%, 49.1%)  1,244  (2.9%, 80.7%)   0  (0.0%, 83.9%)   0  (0.0%, 82.8%)   735  (4.5%, 70.7%)   0  (0.0%, 45.8%)   0  (0.0%, 44.7%)  ./libio/./libio/fileops.c:
   3,626  (2.0%)         12  (0.5%)          7  (0.3%)           767  (1.8%)          0                  0                  440  (2.7%)          0                  0                   _IO_file_xsputn@@GLIBC_2.2.5
     957  (0.5%)          9  (0.4%)          6  (0.3%)           249  (0.6%)          0                  0                  143  (0.9%)          0                  0                   _IO_file_overflow@@GLIBC_2.2.5
     491  (0.3%)         10  (0.4%)          5  (0.2%)           145  (0.3%)          0                  0                   99  (0.6%)          0                  0                   _IO_do_write@@GLIBC_2.2.5
     333  (0.2%)          6  (0.3%)          3  (0.1%)            72  (0.2%)          0                  0                   45  (0.3%)          0                  0                   _IO_file_write@@GLIBC_2.2.5

<  4,291  (2.3%, 79.1%)  48  (2.1%, 51.3%)  48  (2.2%, 51.3%)    649  (1.5%, 82.2%)   8  (0.3%, 84.2%)   8  (0.6%, 83.4%)   323  (2.0%, 72.7%)   4  (0.6%, 46.4%)   4  (0.7%, 45.3%)  ./elf/../sysdeps/x86/dl-cacheinfo.h:
   3,269  (1.8%)         10  (0.4%)         10  (0.5%)           499  (1.2%)          8  (0.3%)          8  (0.6%)           78  (0.5%)          0                  0                   intel_check_word.constprop.0
     596  (0.3%)          4  (0.2%)          4  (0.2%)            98  (0.2%)          0                  0                  158  (1.0%)          1  (0.2%)          1  (0.2%)           handle_intel.constprop.0
     219  (0.1%)         13  (0.6%)         13  (0.6%)            20  (0.0%)          0                  0                   16  (0.1%)          0                  0                   get_common_cache_info.constprop.0
     207  (0.1%)         21  (0.9%)         21  (1.0%)            32  (0.1%)          0                  0                   71  (0.4%)          3  (0.5%)          3  (0.5%)           init_cpu_features.constprop.0

<  3,029  (1.7%, 80.8%)   2  (0.1%, 51.3%)   2  (0.1%, 51.4%)    576  (1.3%, 83.6%)   1  (0.0%, 84.3%)   1  (0.1%, 83.5%)     0  (0.0%, 72.7%)   0  (0.0%, 46.4%)   0  (0.0%, 45.3%)  ./elf/./elf/dl-tunables.h:
   2,994  (1.6%)          1  (0.0%)          1  (0.0%)           576  (1.3%)          1  (0.0%)          1  (0.1%)            0                  0                  0                   __GI___tunables_init

<  2,874  (1.6%, 82.3%) 116  (5.0%, 56.4%) 116  (5.3%, 56.7%)    629  (1.5%, 85.0%)  47  (1.9%, 86.2%)  47  (3.5%, 86.9%)   334  (2.1%, 74.7%)  30  (4.7%, 51.1%)  30  (5.1%, 50.4%)  ./elf/./elf/dl-load.c:
   1,546  (0.8%)         41  (1.8%)         41  (1.9%)           331  (0.8%)         23  (0.9%)         23  (1.7%)          161  (1.0%)         12  (1.9%)         12  (2.0%)           _dl_map_object_from_fd
     445  (0.2%)         23  (1.0%)         23  (1.0%)           101  (0.2%)          1  (0.0%)          1  (0.1%)           70  (0.4%)          7  (1.1%)          7  (1.2%)           _dl_map_object
     343  (0.2%)         20  (0.9%)         20  (0.9%)            68  (0.2%)          7  (0.3%)          7  (0.5%)           22  (0.1%)          3  (0.5%)          3  (0.5%)           open_verify.constprop.0
     251  (0.1%)         12  (0.5%)         12  (0.5%)            55  (0.1%)         11  (0.4%)         11  (0.8%)           12  (0.1%)          2  (0.3%)          2  (0.3%)           open_verify.constprop.1

<  2,381  (1.3%, 83.6%)  22  (1.0%, 57.3%)  22  (1.0%, 57.7%)    802  (1.9%, 86.9%)  31  (1.3%, 87.5%)  28  (2.1%, 89.0%)   252  (1.5%, 76.3%)  21  (3.3%, 54.4%)  20  (3.4%, 53.8%)  ./elf/./elf/dl-version.c:
   2,309  (1.3%)         20  (0.9%)         20  (0.9%)           789  (1.8%)         31  (1.3%)         28  (2.1%)          244  (1.5%)         21  (3.3%)         20  (3.4%)           _dl_check_map_versions

<  2,222  (1.2%, 84.8%)   2  (0.1%, 57.4%)   2  (0.1%, 57.8%)      0  (0.0%, 86.9%)   0  (0.0%, 87.5%)   0  (0.0%, 89.0%)     0  (0.0%, 76.3%)   0  (0.0%, 54.4%)   0  (0.0%, 53.8%)  ./elf/../bits/stdlib-bsearch.h:intel_check_word.constprop.0

<  1,842  (1.0%, 85.8%)  62  (2.7%, 60.1%)  62  (2.8%, 60.6%)    193  (0.5%, 87.4%)   3  (0.1%, 87.6%)   2  (0.1%, 89.2%)   365  (2.2%, 78.5%)  49  (7.7%, 62.1%)  48  (8.1%, 61.9%)  ./malloc/./malloc/malloc.c:
     776  (0.4%)          2  (0.1%)          2  (0.1%)             0                  0                  0                  131  (0.8%)         35  (5.5%)         34  (5.8%)           ptmalloc_init.part.0
     566  (0.3%)         25  (1.1%)         25  (1.1%)            90  (0.2%)          0                  0                  100  (0.6%)          2  (0.3%)          2  (0.3%)           _int_malloc
     195  (0.1%)         20  (0.9%)         20  (0.9%)            47  (0.1%)          2  (0.1%)          1  (0.1%)           30  (0.2%)          2  (0.3%)          2  (0.3%)           sysmalloc

<  1,375  (0.7%, 86.6%)  92  (4.0%, 64.1%)  91  (4.2%, 64.8%)    335  (0.8%, 88.2%)  37  (1.5%, 89.1%)  24  (1.8%, 90.9%)   181  (1.1%, 79.6%)  18  (2.8%, 64.9%)  18  (3.0%, 65.0%)  ./elf/./elf/rtld.c:
   1,094  (0.6%)         68  (3.0%)         68  (3.1%)           269  (0.6%)         32  (1.3%)         21  (1.5%)          118  (0.7%)          9  (1.4%)          9  (1.5%)           dl_main

<  1,159  (0.6%, 87.2%)  13  (0.6%, 64.7%)   8  (0.4%, 65.1%)    197  (0.5%, 88.6%)   3  (0.1%, 89.2%)   2  (0.1%, 91.1%)   126  (0.8%, 80.4%)  13  (2.0%, 67.0%)  13  (2.2%, 67.2%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:
     636  (0.3%)          5  (0.2%)          3  (0.1%)           118  (0.3%)          0                  0                   71  (0.4%)          1  (0.2%)          1  (0.2%)           __memcpy_avx_unaligned_erms
     295  (0.2%)          6  (0.3%)          4  (0.2%)            79  (0.2%)          3  (0.1%)          2  (0.1%)           55  (0.3%)         12  (1.9%)         12  (2.0%)           memcpy
     188  (0.1%)          2  (0.1%)          1  (0.0%)             0                  0                  0                    0                  0                  0                   __mempcpy_avx_unaligned_erms

<  1,112  (0.6%, 87.8%)   9  (0.4%, 65.1%)   5  (0.2%, 65.4%)     92  (0.2%, 88.8%)   1  (0.0%, 89.3%)   1  (0.1%, 91.2%)    72  (0.4%, 80.9%)   0  (0.0%, 67.0%)   0  (0.0%, 67.2%)  ./stdio-common/./stdio-common/_itoa.c:_itoa_word

<    999  (0.5%, 88.4%)  22  (1.0%, 66.0%)  22  (1.0%, 66.4%)    167  (0.4%, 89.2%)  17  (0.7%, 89.9%)  15  (1.1%, 92.3%)    37  (0.2%, 81.1%)   2  (0.3%, 67.3%)   2  (0.3%, 67.5%)  ./elf/./elf/dl-cache.c:
     694  (0.4%)          4  (0.2%)          4  (0.2%)           102  (0.2%)          8  (0.3%)          8  (0.6%)            0                  0                  0                   _dl_cache_libcmp
     293  (0.2%)         16  (0.7%)         16  (0.7%)            62  (0.1%)          7  (0.3%)          7  (0.5%)           34  (0.2%)          2  (0.3%)          2  (0.3%)           _dl_load_cache_lookup

<    984  (0.5%, 88.9%)  35  (1.5%, 67.5%)  35  (1.6%, 68.0%)    199  (0.5%, 89.7%)   2  (0.1%, 90.0%)   2  (0.1%, 92.4%)    94  (0.6%, 81.7%)   7  (1.1%, 68.4%)   7  (1.2%, 68.7%)  ./elf/./elf/dl-deps.c:
     948  (0.5%)         34  (1.5%)         34  (1.6%)           183  (0.4%)          2  (0.1%)          2  (0.1%)           88  (0.5%)          6  (0.9%)          6  (1.0%)           _dl_map_object_deps

<    868  (0.5%, 89.4%)   0  (0.0%, 67.5%)   0  (0.0%, 68.0%)      0  (0.0%, 89.7%)   0  (0.0%, 90.0%)   0  (0.0%, 92.4%)   196  (1.2%, 82.9%)   0  (0.0%, 68.4%)   0  (0.0%, 68.7%)  ./elf/../sysdeps/generic/dl-protected.h:do_lookup_x

<    770  (0.4%, 89.8%)  37  (1.6%, 69.1%)  37  (1.7%, 69.6%)    142  (0.3%, 90.0%)   0  (0.0%, 90.0%)   0  (0.0%, 92.4%)   126  (0.8%, 83.6%)   9  (1.4%, 69.8%)   9  (1.5%, 70.2%)  ./elf/./elf/dl-hwcaps.c:_dl_important_hwcaps

<    743  (0.4%, 90.2%)   1  (0.0%, 69.2%)   1  (0.0%, 69.7%)    188  (0.4%, 90.4%)   0  (0.0%, 90.0%)   0  (0.0%, 92.4%)     0  (0.0%, 83.6%)   0  (0.0%, 69.8%)   0  (0.0%, 70.2%)  ./elf/../sysdeps/generic/ldsodefs.h:
     455  (0.2%)          1  (0.0%)          1  (0.0%)            91  (0.2%)          0                  0                    0                  0                  0                   do_lookup_x
     285  (0.2%)          0                  0                    95  (0.2%)          0                  0                    0                  0                  0                   _dl_relocate_object

<    697  (0.4%, 90.6%)  18  (0.8%, 70.0%)  18  (0.8%, 70.5%)    134  (0.3%, 90.8%)   4  (0.2%, 90.2%)   4  (0.3%, 92.7%)   131  (0.8%, 84.4%)  25  (3.9%, 73.7%)  25  (4.2%, 74.5%)  ./elf/./elf/dl-object.c:
     585  (0.3%)         15  (0.7%)         15  (0.7%)           105  (0.2%)          4  (0.2%)          4  (0.3%)          108  (0.7%)         24  (3.8%)         24  (4.1%)           _dl_new_object

<    684  (0.4%, 91.0%)   4  (0.2%, 70.1%)   2  (0.1%, 70.6%)     72  (0.2%, 90.9%)   7  (0.3%, 90.5%)   7  (0.5%, 93.2%)     0  (0.0%, 84.4%)   0  (0.0%, 73.7%)   0  (0.0%, 74.5%)  ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:__strchrnul_avx2

<    664  (0.4%, 91.3%)   7  (0.3%, 70.4%)   7  (0.3%, 70.9%)    114  (0.3%, 91.2%)   2  (0.1%, 90.6%)   1  (0.1%, 93.3%)   110  (0.7%, 85.1%)   3  (0.5%, 74.2%)   2  (0.3%, 74.8%)  ./elf/./elf/dl-minimal-malloc.c:
     574  (0.3%)          4  (0.2%)          4  (0.2%)           110  (0.3%)          2  (0.1%)          1  (0.1%)          110  (0.7%)          3  (0.5%)          2  (0.3%)           __minimal_malloc

<    632  (0.3%, 91.7%)  35  (1.5%, 72.0%)  33  (1.5%, 72.4%)    199  (0.5%, 91.7%)   8  (0.3%, 90.9%)   3  (0.2%, 93.5%)    94  (0.6%, 85.7%)   0  (0.0%, 74.2%)   0  (0.0%, 74.8%)  ./libio/./libio/genops.c:
     210  (0.1%)          5  (0.2%)          5  (0.2%)            69  (0.2%)          0                  0                   18  (0.1%)          0                  0                   _IO_default_xsputn

<    609  (0.3%, 92.0%)  25  (1.1%, 73.0%)  25  (1.1%, 73.6%)     76  (0.2%, 91.8%)   6  (0.2%, 91.1%)   0  (0.0%, 93.5%)   361  (2.2%, 87.9%)  42  (6.6%, 80.8%)  41  (6.9%, 81.7%)  ./elf/../elf/dl-tls.c:
     350  (0.2%)          3  (0.1%)          3  (0.1%)             7  (0.0%)          0                  0                  319  (2.0%)         41  (6.4%)         41  (6.9%)           _dl_allocate_tls_storage

<    574  (0.3%, 92.3%)  18  (0.8%, 73.8%)  18  (0.8%, 74.4%)    101  (0.2%, 92.1%)  13  (0.5%, 91.7%)  13  (1.0%, 94.5%)    48  (0.3%, 88.2%)  12  (1.9%, 82.7%)  12  (2.0%, 83.8%)  ./elf/./get-dynamic-info.h:
     331  (0.2%)         11  (0.5%)         11  (0.5%)            57  (0.1%)          7  (0.3%)          7  (0.5%)           30  (0.2%)          6  (0.9%)          6  (1.0%)           dl_main
     243  (0.1%)          7  (0.3%)          7  (0.3%)            44  (0.1%)          6  (0.2%)          6  (0.4%)           18  (0.1%)          6  (0.9%)          6  (1.0%)           _dl_start

<    553  (0.3%, 92.6%)  16  (0.7%, 74.5%)  16  (0.7%, 75.1%)    187  (0.4%, 92.5%)  24  (1.0%, 92.6%)   0  (0.0%, 94.5%)    80  (0.5%, 88.7%)   0  (0.0%, 82.7%)   0  (0.0%, 83.8%)  ./elf/./elf/dl-reloc.c:_dl_relocate_object

<    550  (0.3%, 92.9%)  27  (1.2%, 75.7%)  13  (0.6%, 75.7%)    155  (0.4%, 92.9%)   5  (0.2%, 92.8%)   0  (0.0%, 94.5%)    78  (0.5%, 89.2%)   0  (0.0%, 82.7%)   0  (0.0%, 83.8%)  ./elf/./elf/dl-sort-maps.c:
     284  (0.2%)          6  (0.3%)          3  (0.1%)            93  (0.2%)          3  (0.1%)          0                   48  (0.3%)          0                  0                   dfs_traversal.part.0
     254  (0.1%)         20  (0.9%)          9  (0.4%)            60  (0.1%)          2  (0.1%)          0                   28  (0.2%)          0                  0                   _dl_sort_maps

<    536  (0.3%, 93.2%)  10  (0.4%, 76.1%)  10  (0.5%, 76.2%)     92  (0.2%, 93.1%)  15  (0.6%, 93.5%)  15  (1.1%, 95.6%)    43  (0.3%, 89.4%)  12  (1.9%, 84.6%)  12  (2.0%, 85.8%)  ./elf/./elf/get-dynamic-info.h:_dl_map_object_from_fd

<    494  (0.3%, 93.5%)  17  (0.7%, 76.9%)  17  (0.8%, 77.0%)    126  (0.3%, 93.4%)  17  (0.7%, 94.2%)  15  (1.1%, 96.7%)    40  (0.2%, 89.7%)   7  (1.1%, 85.7%)   7  (1.2%, 87.0%)  ./elf/../elf/dl-sysdep.c:
     492  (0.3%)         16  (0.7%)         16  (0.7%)           125  (0.3%)         17  (0.7%)         15  (1.1%)           40  (0.2%)          7  (1.1%)          7  (1.2%)           _dl_sysdep_start

<    490  (0.3%, 93.7%)  10  (0.4%, 77.3%)  10  (0.5%, 77.4%)     74  (0.2%, 93.5%)   4  (0.2%, 94.3%)   2  (0.1%, 96.8%)    40  (0.2%, 89.9%)   0  (0.0%, 85.7%)   0  (0.0%, 87.0%)  ./stdlib/../stdlib/strtol_l.c:____strtol_l_internal

<    480  (0.3%, 94.0%)   8  (0.3%, 77.6%)   4  (0.2%, 77.6%)     96  (0.2%, 93.8%)   0  (0.0%, 94.3%)   0  (0.0%, 96.8%)   176  (1.1%, 91.0%)   0  (0.0%, 85.7%)   0  (0.0%, 87.0%)  ./stdio-common/./stdio-common/printf.c:printf

<    479  (0.3%, 94.3%)   6  (0.3%, 77.9%)   6  (0.3%, 77.9%)    102  (0.2%, 94.0%)   1  (0.0%, 94.4%)   1  (0.1%, 96.9%)    78  (0.5%, 91.5%)   0  (0.0%, 85.7%)   0  (0.0%, 87.0%)  ./elf/./elf/dl-hwcaps_split.c:
     437  (0.2%)          3  (0.1%)          3  (0.1%)            92  (0.2%)          1  (0.0%)          1  (0.1%)           76  (0.5%)          0                  0                   _dl_hwcaps_split_masked

<    429  (0.2%, 94.5%)   4  (0.2%, 78.1%)   4  (0.2%, 78.0%)    109  (0.3%, 94.3%)   1  (0.0%, 94.4%)   1  (0.1%, 97.0%)    69  (0.4%, 91.9%)   3  (0.5%, 86.2%)   3  (0.5%, 87.5%)  ./elf/./elf/dl-misc.c:
     387  (0.2%)          2  (0.1%)          2  (0.1%)           103  (0.2%)          0                  0                   60  (0.4%)          1  (0.2%)          1  (0.2%)           _dl_name_match_p

<    386  (0.2%, 94.7%)  41  (1.8%, 79.9%)  27  (1.2%, 79.3%)    182  (0.4%, 94.7%)   5  (0.2%, 94.6%)   0  (0.0%, 97.0%)    18  (0.1%, 92.0%)   1  (0.2%, 86.3%)   1  (0.2%, 87.6%)  ???:
     374  (0.2%)         40  (1.7%)         26  (1.2%)           180  (0.4%)          5  (0.2%)          0                   15  (0.1%)          1  (0.2%)          1  (0.2%)           ???

<    384  (0.2%, 94.9%)   6  (0.3%, 80.1%)   5  (0.2%, 79.5%)     48  (0.1%, 94.8%)   3  (0.1%, 94.7%)   3  (0.2%, 97.2%)     0  (0.0%, 92.0%)   0  (0.0%, 86.3%)   0  (0.0%, 87.6%)  ./string/../sysdeps/x86_64/multiarch/../strchr.S:index

<    379  (0.2%, 95.1%)  14  (0.6%, 80.7%)  14  (0.6%, 80.1%)     76  (0.2%, 95.0%)   2  (0.1%, 94.8%)   1  (0.1%, 97.3%)    27  (0.2%, 92.2%)   0  (0.0%, 86.3%)   0  (0.0%, 87.6%)  ./elf/../sysdeps/x86/dl-prop.h:
     212  (0.1%)          5  (0.2%)          5  (0.2%)            38  (0.1%)          1  (0.0%)          1  (0.1%)           17  (0.1%)          0                  0                   _dl_map_object_from_fd

<    358  (0.2%, 95.3%)   2  (0.1%, 80.8%)   2  (0.1%, 80.2%)    123  (0.3%, 95.3%)   0  (0.0%, 94.8%)   0  (0.0%, 97.3%)     1  (0.0%, 92.2%)   0  (0.0%, 86.3%)   0  (0.0%, 87.6%)  ./elf/./elf/dl-environ.c:_dl_next_ld_env_entry

<    344  (0.2%, 95.5%)   0  (0.0%, 80.8%)   0  (0.0%, 80.2%)     56  (0.1%, 95.4%)   1  (0.0%, 94.9%)   0  (0.0%, 97.3%)    16  (0.1%, 92.3%)   0  (0.0%, 86.3%)   0  (0.0%, 87.6%)  ./stdio-common/../libio/libioP.h:__vfprintf_internal

<    335  (0.2%, 95.7%)   4  (0.2%, 81.0%)   4  (0.2%, 80.4%)      7  (0.0%, 95.4%)   0  (0.0%, 94.9%)   0  (0.0%, 97.3%)   146  (0.9%, 93.2%)  35  (5.5%, 91.8%)  35  (5.9%, 93.6%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:memset

<    327  (0.2%, 95.9%)   4  (0.2%, 81.2%)   4  (0.2%, 80.6%)     44  (0.1%, 95.5%)   3  (0.1%, 95.0%)   3  (0.2%, 97.5%)     0  (0.0%, 93.2%)   0  (0.0%, 91.8%)   0  (0.0%, 93.6%)  ./string/../sysdeps/x86_64/multiarch/strlen-vec.S:strlen

<    288  (0.2%, 96.0%)   7  (0.3%, 81.5%)   7  (0.3%, 80.9%)     90  (0.2%, 95.7%)   0  (0.0%, 95.0%)   0  (0.0%, 97.5%)    29  (0.2%, 93.4%)   1  (0.2%, 92.0%)   1  (0.2%, 93.7%)  ./elf/./dl-map-segments.h:_dl_map_object_from_fd

<    273  (0.1%, 96.2%)  12  (0.5%, 82.0%)  12  (0.5%, 81.5%)     77  (0.2%, 95.9%)   2  (0.1%, 95.1%)   0  (0.0%, 97.5%)    39  (0.2%, 93.6%)   1  (0.2%, 92.1%)   0  (0.0%, 93.7%)  ./elf/./elf/dl-fini.c:_dl_fini

<    268  (0.1%, 96.3%)   7  (0.3%, 82.3%)   7  (0.3%, 81.8%)     95  (0.2%, 96.1%)   5  (0.2%, 95.3%)   4  (0.3%, 97.8%)    39  (0.2%, 93.9%)   0  (0.0%, 92.1%)   0  (0.0%, 93.7%)  ./elf/./elf/dl-lookup-direct.c:_dl_lookup_direct

<    257  (0.1%, 96.5%)   3  (0.1%, 82.4%)   3  (0.1%, 81.9%)     69  (0.2%, 96.3%)  41  (1.7%, 96.9%)   8  (0.6%, 98.4%)    16  (0.1%, 93.9%)   3  (0.5%, 92.6%)   2  (0.3%, 94.1%)  ./elf/./dl-find_object.h:_dl_find_object_from_map

<    251  (0.1%, 96.6%)   3  (0.1%, 82.6%)   3  (0.1%, 82.1%)    120  (0.3%, 96.6%)   2  (0.1%, 97.0%)   2  (0.1%, 98.5%)    34  (0.2%, 94.2%)   4  (0.6%, 93.2%)   4  (0.7%, 94.8%)  ./string/../sysdeps/x86_64/strcspn.S:strcspn

<    188  (0.1%, 96.7%)   7  (0.3%, 82.9%)   7  (0.3%, 82.4%)     68  (0.2%, 96.7%)   7  (0.3%, 97.3%)   1  (0.1%, 98.6%)    18  (0.1%, 94.3%)   1  (0.2%, 93.4%)   0  (0.0%, 94.8%)  ./elf/./elf/dl-runtime.c:_dl_fixup

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir___________________ I1mr______________ ILmr______________ Dr__________________ D1mr______________ DLmr______________ Dw__________________ D1mw______________ DLmw______________  function:file

> 28,878 (15.7%, 15.7%)  54  (2.3%,  2.3%)  54  (2.5%,  2.5%) 7,201 (16.8%, 16.8%) 698 (28.5%, 28.5%) 638 (47.1%, 47.1%) 2,511 (15.4%, 15.4%) 249 (39.2%, 39.2%) 236 (39.9%, 39.9%)  _dl_relocate_object:
  18,025  (9.8%)         21  (0.9%)         21  (1.0%)        4,521 (10.5%)        415 (17.0%)        394 (29.1%)        2,056 (12.6%)        246 (38.7%)        236 (39.9%)           ./elf/../sysdeps/x86_64/dl-machine.h
  10,015  (5.5%)         17  (0.7%)         17  (0.8%)        2,398  (5.6%)        259 (10.6%)        244 (18.0%)          375  (2.3%)          3  (0.5%)          0                   ./elf/./elf/do-rel.h
     553  (0.3%)         16  (0.7%)         16  (0.7%)          187  (0.4%)         24  (1.0%)          0                   80  (0.5%)          0                  0                   ./elf/./elf/dl-reloc.c
     285  (0.2%)          0                  0                   95  (0.2%)          0                  0                    0                  0                  0                   ./elf/../sysdeps/generic/ldsodefs.h

> 28,371 (15.5%, 31.2%)   6  (0.3%,  2.6%)   6  (0.3%,  2.7%) 5,204 (12.1%, 28.9%)  63  (2.6%, 31.1%)  63  (4.6%, 51.7%)     6  (0.0%, 15.5%)   1  (0.2%, 39.3%)   1  (0.2%, 40.1%)  __GI___tunables_init:
  25,377 (13.8%)          5  (0.2%)          5  (0.2%)        4,628 (10.8%)         62  (2.5%)         62  (4.6%)            6  (0.0%)          1  (0.2%)          1  (0.2%)           ./elf/./elf/dl-tunables.c
   2,994  (1.6%)          1  (0.0%)          1  (0.0%)          576  (1.3%)          1  (0.0%)          1  (0.1%)            0                  0                  0                   ./elf/./elf/dl-tunables.h

> 25,694 (14.0%, 45.2%)  19  (0.8%,  3.4%)  19  (0.9%,  3.6%) 8,279 (19.3%, 48.2%) 194  (7.9%, 39.0%) 159 (11.7%, 63.4%) 3,628 (22.3%, 37.7%)   8  (1.3%, 40.6%)   3  (0.5%, 40.6%)  do_lookup_x:
  24,371 (13.3%)         18  (0.8%)         18  (0.8%)        8,188 (19.1%)        194  (7.9%)        159 (11.7%)        3,432 (21.1%)          8  (1.3%)          3  (0.5%)           ./elf/./elf/dl-lookup.c
     868  (0.5%)          0                  0                    0                  0                  0                  196  (1.2%)          0                  0                   ./elf/../sysdeps/generic/dl-protected.h
     455  (0.2%)          1  (0.0%)          1  (0.0%)           91  (0.2%)          0                  0                    0                  0                  0                   ./elf/../sysdeps/generic/ldsodefs.h

> 21,037 (11.5%, 56.7%)  11  (0.5%,  3.9%)  11  (0.5%,  4.1%) 4,461 (10.4%, 58.6%)  97  (4.0%, 43.0%)  88  (6.5%, 69.9%) 2,353 (14.5%, 52.2%)   8  (1.3%, 41.8%)   1  (0.2%, 40.8%)  _dl_lookup_symbol_x:./elf/./elf/dl-lookup.c

> 16,429  (9.0%, 65.6%) 847 (36.8%, 40.7%) 847 (38.7%, 42.8%) 4,082  (9.5%, 68.1%) 816 (33.3%, 76.3%)   8  (0.6%, 70.5%)   818  (5.0%, 57.2%)   0  (0.0%, 41.8%)   0  (0.0%, 40.8%)  prime_cache_set:/home/spectre/Documents/The-UNSHARED-Spectre/PrimeProbe/primeprobe.c

>  6,565  (3.6%, 69.2%)  90  (3.9%, 44.6%)  51  (2.3%, 45.1%) 1,494  (3.5%, 71.6%)  11  (0.4%, 76.8%)   7  (0.5%, 71.0%)   949  (5.8%, 63.1%)   0  (0.0%, 41.8%)   0  (0.0%, 40.8%)  __vfprintf_internal:
   6,057  (3.3%)         90  (3.9%)         51  (2.3%)        1,422  (3.3%)         10  (0.4%)          7  (0.5%)          881  (5.4%)          0                  0                   ./stdio-common/./stdio-common/vfprintf-internal.c
     344  (0.2%)          0                  0                   56  (0.1%)          1  (0.0%)          0                   16  (0.1%)          0                  0                   ./stdio-common/../libio/libioP.h

>  5,914  (3.2%, 72.4%)  47  (2.0%, 46.6%)  46  (2.1%, 47.2%) 1,188  (2.8%, 74.4%)  51  (2.1%, 78.9%)  40  (2.9%, 74.0%)     0  (0.0%, 63.1%)   0  (0.0%, 41.8%)   0  (0.0%, 40.8%)  strcmp:
   5,897  (3.2%)         44  (1.9%)         43  (2.0%)        1,184  (2.8%)         51  (2.1%)         40  (2.9%)            0                  0                  0                   ./string/../sysdeps/x86_64/strcmp.S

>  5,491  (3.0%, 75.4%)  12  (0.5%, 47.1%)  12  (0.5%, 47.7%)   499  (1.2%, 75.6%)   8  (0.3%, 79.2%)   8  (0.6%, 74.6%)    78  (0.5%, 63.5%)   0  (0.0%, 41.8%)   0  (0.0%, 40.8%)  intel_check_word.constprop.0:
   3,269  (1.8%)         10  (0.4%)         10  (0.5%)          499  (1.2%)          8  (0.3%)          8  (0.6%)           78  (0.5%)          0                  0                   ./elf/../sysdeps/x86/dl-cacheinfo.h
   2,222  (1.2%)          2  (0.1%)          2  (0.1%)            0                  0                  0                    0                  0                  0                   ./elf/../bits/stdlib-bsearch.h

>  5,128  (2.8%, 78.2%)   6  (0.3%, 47.4%)   6  (0.3%, 48.0%) 1,704  (4.0%, 79.5%)  48  (2.0%, 81.2%)  40  (2.9%, 77.5%)   582  (3.6%, 67.1%)   2  (0.3%, 42.1%)   1  (0.2%, 40.9%)  check_match:./elf/./elf/dl-lookup.c

>  3,689  (2.0%, 80.2%)  13  (0.6%, 48.0%)   8  (0.4%, 48.4%)   767  (1.8%, 81.3%)   0  (0.0%, 81.2%)   0  (0.0%, 77.5%)   440  (2.7%, 69.8%)   0  (0.0%, 42.1%)   0  (0.0%, 40.9%)  _IO_file_xsputn@@GLIBC_2.2.5:
   3,626  (2.0%)         12  (0.5%)          7  (0.3%)          767  (1.8%)          0                  0                  440  (2.7%)          0                  0                   ./libio/./libio/fileops.c

>  2,672  (1.5%, 81.7%)  69  (3.0%, 51.0%)  69  (3.1%, 51.5%)   584  (1.4%, 82.7%)  41  (1.7%, 82.8%)  41  (3.0%, 80.5%)   257  (1.6%, 71.4%)  25  (3.9%, 46.1%)  25  (4.2%, 45.2%)  _dl_map_object_from_fd:
   1,546  (0.8%)         41  (1.8%)         41  (1.9%)          331  (0.8%)         23  (0.9%)         23  (1.7%)          161  (1.0%)         12  (1.9%)         12  (2.0%)           ./elf/./elf/dl-load.c
     536  (0.3%)         10  (0.4%)         10  (0.5%)           92  (0.2%)         15  (0.6%)         15  (1.1%)           43  (0.3%)         12  (1.9%)         12  (2.0%)           ./elf/./elf/get-dynamic-info.h
     288  (0.2%)          7  (0.3%)          7  (0.3%)           90  (0.2%)          0                  0                   29  (0.2%)          1  (0.2%)          1  (0.2%)           ./elf/./dl-map-segments.h
     212  (0.1%)          5  (0.2%)          5  (0.2%)           38  (0.1%)          1  (0.0%)          1  (0.1%)           17  (0.1%)          0                  0                   ./elf/../sysdeps/x86/dl-prop.h

>  2,318  (1.3%, 82.9%)  20  (0.9%, 51.8%)  20  (0.9%, 52.4%)   792  (1.8%, 84.5%)  31  (1.3%, 84.1%)  28  (2.1%, 82.6%)   247  (1.5%, 72.9%)  21  (3.3%, 49.4%)  20  (3.4%, 48.6%)  _dl_check_map_versions:
   2,309  (1.3%)         20  (0.9%)         20  (0.9%)          789  (1.8%)         31  (1.3%)         28  (2.1%)          244  (1.5%)         21  (3.3%)         20  (3.4%)           ./elf/./elf/dl-version.c

>  2,054  (1.1%, 84.0%)  24  (1.0%, 52.9%)  23  (1.0%, 53.5%)   553  (1.3%, 85.8%)  73  (3.0%, 87.1%)  71  (5.2%, 87.8%)   193  (1.2%, 74.1%)  35  (5.5%, 54.9%)  35  (5.9%, 54.5%)  _dl_start:
     883  (0.5%)          5  (0.2%)          5  (0.2%)          319  (0.7%)         44  (1.8%)         44  (3.2%)          148  (0.9%)         22  (3.5%)         22  (3.7%)           ./elf/../sysdeps/x86_64/dl-machine.h
     815  (0.4%)          2  (0.1%)          2  (0.1%)          165  (0.4%)         20  (0.8%)         20  (1.5%)            0                  0                  0                   ./elf/./elf/do-rel.h
     243  (0.1%)          7  (0.3%)          7  (0.3%)           44  (0.1%)          6  (0.2%)          6  (0.4%)           18  (0.1%)          6  (0.9%)          6  (1.0%)           ./elf/./get-dynamic-info.h

>  1,618  (0.9%, 84.9%)  93  (4.0%, 56.9%)  93  (4.2%, 57.7%)   373  (0.9%, 86.7%)  41  (1.7%, 88.8%)  29  (2.1%, 90.0%)   166  (1.0%, 75.1%)  15  (2.4%, 57.2%)  15  (2.5%, 57.0%)  dl_main:
   1,094  (0.6%)         68  (3.0%)         68  (3.1%)          269  (0.6%)         32  (1.3%)         21  (1.5%)          118  (0.7%)          9  (1.4%)          9  (1.5%)           ./elf/./elf/rtld.c
     331  (0.2%)         11  (0.5%)         11  (0.5%)           57  (0.1%)          7  (0.3%)          7  (0.5%)           30  (0.2%)          6  (0.9%)          6  (1.0%)           ./elf/./get-dynamic-info.h

>  1,112  (0.6%, 85.5%)   9  (0.4%, 57.3%)   5  (0.2%, 58.0%)    92  (0.2%, 86.9%)   1  (0.0%, 88.8%)   1  (0.1%, 90.0%)    72  (0.4%, 75.6%)   0  (0.0%, 57.2%)   0  (0.0%, 57.0%)  _itoa_word:./stdio-common/./stdio-common/_itoa.c

>    967  (0.5%, 86.1%)  35  (1.5%, 58.8%)  35  (1.6%, 59.6%)   188  (0.4%, 87.3%)   2  (0.1%, 88.9%)   2  (0.1%, 90.2%)    96  (0.6%, 76.1%)   7  (1.1%, 58.3%)   7  (1.2%, 58.2%)  _dl_map_object_deps:
     948  (0.5%)         34  (1.5%)         34  (1.6%)          183  (0.4%)          2  (0.1%)          2  (0.1%)           88  (0.5%)          6  (0.9%)          6  (1.0%)           ./elf/./elf/dl-deps.c

>    957  (0.5%, 86.6%)   9  (0.4%, 59.2%)   6  (0.3%, 59.8%)   249  (0.6%, 87.9%)   0  (0.0%, 88.9%)   0  (0.0%, 90.2%)   143  (0.9%, 77.0%)   0  (0.0%, 58.3%)   0  (0.0%, 58.2%)  _IO_file_overflow@@GLIBC_2.2.5:./libio/./libio/fileops.c

>    845  (0.5%, 87.0%)   9  (0.4%, 59.6%)   9  (0.4%, 60.2%)     9  (0.0%, 87.9%)   2  (0.1%, 89.0%)   1  (0.1%, 90.3%)   148  (0.9%, 77.9%)  35  (5.5%, 63.8%)  34  (5.8%, 64.0%)  ptmalloc_init.part.0:
     776  (0.4%)          2  (0.1%)          2  (0.1%)            0                  0                  0                  131  (0.8%)         35  (5.5%)         34  (5.8%)           ./malloc/./malloc/malloc.c

>    820  (0.4%, 87.5%)  41  (1.8%, 61.4%)  41  (1.9%, 62.1%)   156  (0.4%, 88.3%)   0  (0.0%, 89.0%)   0  (0.0%, 90.3%)   151  (0.9%, 78.9%)   9  (1.4%, 65.3%)   9  (1.5%, 65.5%)  _dl_important_hwcaps:
     770  (0.4%)         37  (1.6%)         37  (1.7%)          142  (0.3%)          0                  0                  126  (0.8%)          9  (1.4%)          9  (1.5%)           ./elf/./elf/dl-hwcaps.c

>    694  (0.4%, 87.9%)   4  (0.2%, 61.5%)   4  (0.2%, 62.3%)   102  (0.2%, 88.6%)   8  (0.3%, 89.3%)   8  (0.6%, 90.9%)     0  (0.0%, 78.9%)   0  (0.0%, 65.3%)   0  (0.0%, 65.5%)  _dl_cache_libcmp:./elf/./elf/dl-cache.c

>    684  (0.4%, 88.2%)   4  (0.2%, 61.7%)   2  (0.1%, 62.4%)    72  (0.2%, 88.7%)   7  (0.3%, 89.6%)   7  (0.5%, 91.4%)     0  (0.0%, 78.9%)   0  (0.0%, 65.3%)   0  (0.0%, 65.5%)  __strchrnul_avx2:./string/../sysdeps/x86_64/multiarch/strchr-avx2.S

>    677  (0.4%, 88.6%)   3  (0.1%, 61.8%)   3  (0.1%, 62.5%)   132  (0.3%, 89.0%)  37  (1.5%, 91.1%)  17  (1.3%, 92.6%)    33  (0.2%, 79.1%)   0  (0.0%, 65.3%)   0  (0.0%, 65.5%)  __tunable_get_val:./elf/./elf/dl-tunables.c

>    636  (0.3%, 89.0%)   5  (0.2%, 62.1%)   3  (0.1%, 62.7%)   118  (0.3%, 89.3%)   0  (0.0%, 91.1%)   0  (0.0%, 92.6%)    71  (0.4%, 79.5%)   1  (0.2%, 65.4%)   1  (0.2%, 65.7%)  __memcpy_avx_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

>    603  (0.3%, 89.3%)  16  (0.7%, 62.8%)  16  (0.7%, 63.4%)   110  (0.3%, 89.6%)   4  (0.2%, 91.3%)   4  (0.3%, 92.9%)   116  (0.7%, 80.2%)  24  (3.8%, 69.2%)  24  (4.1%, 69.7%)  _dl_new_object:
     585  (0.3%)         15  (0.7%)         15  (0.7%)          105  (0.2%)          4  (0.2%)          4  (0.3%)          108  (0.7%)         24  (3.8%)         24  (4.1%)           ./elf/./elf/dl-object.c

>    596  (0.3%, 89.6%)   4  (0.2%, 62.9%)   4  (0.2%, 63.6%)    98  (0.2%, 89.8%)   0  (0.0%, 91.3%)   0  (0.0%, 92.9%)   158  (1.0%, 81.2%)   1  (0.2%, 69.3%)   1  (0.2%, 69.9%)  handle_intel.constprop.0:./elf/../sysdeps/x86/dl-cacheinfo.h

>    574  (0.3%, 89.9%)   4  (0.2%, 63.1%)   4  (0.2%, 63.8%)   110  (0.3%, 90.0%)   2  (0.1%, 91.3%)   1  (0.1%, 93.0%)   110  (0.7%, 81.9%)   3  (0.5%, 69.8%)   2  (0.3%, 70.2%)  __minimal_malloc:./elf/./elf/dl-minimal-malloc.c

>    566  (0.3%, 90.2%)  25  (1.1%, 64.2%)  25  (1.1%, 64.9%)    90  (0.2%, 90.3%)   0  (0.0%, 91.3%)   0  (0.0%, 93.0%)   100  (0.6%, 82.5%)   2  (0.3%, 70.1%)   2  (0.3%, 70.6%)  _int_malloc:./malloc/./malloc/malloc.c

>    563  (0.3%, 90.5%)  12  (0.5%, 64.7%)   6  (0.3%, 65.2%)   145  (0.3%, 90.6%)   0  (0.0%, 91.3%)   0  (0.0%, 93.0%)    99  (0.6%, 83.1%)   0  (0.0%, 70.1%)   0  (0.0%, 70.6%)  _IO_do_write@@GLIBC_2.2.5:
     491  (0.3%)         10  (0.4%)          5  (0.2%)          145  (0.3%)          0                  0                   99  (0.6%)          0                  0                   ./libio/./libio/fileops.c

>    516  (0.3%, 90.8%)  48  (2.1%, 66.8%)  34  (1.6%, 66.7%)   203  (0.5%, 91.1%)   6  (0.2%, 91.6%)   1  (0.1%, 93.1%)    37  (0.2%, 83.3%)   1  (0.2%, 70.3%)   1  (0.2%, 70.7%)  ???:
     374  (0.2%)         40  (1.7%)         26  (1.2%)          180  (0.4%)          5  (0.2%)          0                   15  (0.1%)          1  (0.2%)          1  (0.2%)           ???

>    495  (0.3%, 91.1%)  16  (0.7%, 67.5%)  16  (0.7%, 67.5%)   125  (0.3%, 91.4%)  17  (0.7%, 92.3%)  15  (1.1%, 94.2%)    42  (0.3%, 83.6%)   7  (1.1%, 71.4%)   7  (1.2%, 71.9%)  _dl_sysdep_start:
     492  (0.3%)         16  (0.7%)         16  (0.7%)          125  (0.3%)         17  (0.7%)         15  (1.1%)           40  (0.2%)          7  (1.1%)          7  (1.2%)           ./elf/../elf/dl-sysdep.c

>    490  (0.3%, 91.4%)  10  (0.4%, 67.9%)  10  (0.5%, 67.9%)    74  (0.2%, 91.5%)   4  (0.2%, 92.4%)   2  (0.1%, 94.3%)    40  (0.2%, 83.8%)   0  (0.0%, 71.4%)   0  (0.0%, 71.9%)  ____strtol_l_internal:./stdlib/../stdlib/strtol_l.c

>    489  (0.3%, 91.6%)  17  (0.7%, 68.7%)  16  (0.7%, 68.6%)   138  (0.3%, 91.9%)   0  (0.0%, 92.4%)   0  (0.0%, 94.3%)    68  (0.4%, 84.2%)   1  (0.2%, 71.5%)   0  (0.0%, 71.9%)  main:/home/spectre/Documents/The-UNSHARED-Spectre/PrimeProbe/primeprobe.c

>    480  (0.3%, 91.9%)   8  (0.3%, 69.0%)   4  (0.2%, 68.8%)    96  (0.2%, 92.1%)   0  (0.0%, 92.4%)   0  (0.0%, 94.3%)   176  (1.1%, 85.3%)   0  (0.0%, 71.5%)   0  (0.0%, 71.9%)  printf:./stdio-common/./stdio-common/printf.c

>    445  (0.2%, 92.1%)  23  (1.0%, 70.0%)  23  (1.0%, 69.9%)   101  (0.2%, 92.3%)   1  (0.0%, 92.5%)   1  (0.1%, 94.4%)    70  (0.4%, 85.7%)   7  (1.1%, 72.6%)   7  (1.2%, 73.1%)  _dl_map_object:./elf/./elf/dl-load.c

>    437  (0.2%, 92.4%)   3  (0.1%, 70.1%)   3  (0.1%, 70.0%)    92  (0.2%, 92.5%)   1  (0.0%, 92.5%)   1  (0.1%, 94.5%)    76  (0.5%, 86.2%)   0  (0.0%, 72.6%)   0  (0.0%, 73.1%)  _dl_hwcaps_split_masked:./elf/./elf/dl-hwcaps_split.c

>    406  (0.2%, 92.6%)   8  (0.3%, 70.5%)   7  (0.3%, 70.3%)    52  (0.1%, 92.6%)   3  (0.1%, 92.6%)   3  (0.2%, 94.7%)     0  (0.0%, 86.2%)   0  (0.0%, 72.6%)   0  (0.0%, 73.1%)  index:
     384  (0.2%)          6  (0.3%)          5  (0.2%)           48  (0.1%)          3  (0.1%)          3  (0.2%)            0                  0                  0                   ./string/../sysdeps/x86_64/multiarch/../strchr.S

>    387  (0.2%, 92.8%)   2  (0.1%, 70.6%)   2  (0.1%, 70.4%)   103  (0.2%, 92.9%)   0  (0.0%, 92.6%)   0  (0.0%, 94.7%)    60  (0.4%, 86.6%)   1  (0.2%, 72.8%)   1  (0.2%, 73.3%)  _dl_name_match_p:./elf/./elf/dl-misc.c

>    384  (0.2%, 93.0%)  44  (1.9%, 72.5%)  44  (2.0%, 72.4%)    61  (0.1%, 93.0%)   1  (0.0%, 92.7%)   1  (0.1%, 94.8%)   104  (0.6%, 87.2%)   5  (0.8%, 73.6%)   5  (0.8%, 74.1%)  init_cpu_features.constprop.0:
     207  (0.1%)         21  (0.9%)         21  (1.0%)           32  (0.1%)          0                  0                   71  (0.4%)          3  (0.5%)          3  (0.5%)           ./elf/../sysdeps/x86/dl-cacheinfo.h

>    361  (0.2%, 93.2%)   7  (0.3%, 72.8%)   7  (0.3%, 72.8%)    11  (0.0%, 93.1%)   0  (0.0%, 92.7%)   0  (0.0%, 94.8%)   146  (0.9%, 88.1%)  35  (5.5%, 79.1%)  35  (5.9%, 80.0%)  memset:
     335  (0.2%)          4  (0.2%)          4  (0.2%)            7  (0.0%)          0                  0                  146  (0.9%)         35  (5.5%)         35  (5.9%)           ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

>    358  (0.2%, 93.4%)   2  (0.1%, 72.9%)   2  (0.1%, 72.8%)   123  (0.3%, 93.3%)   0  (0.0%, 92.7%)   0  (0.0%, 94.8%)     1  (0.0%, 88.1%)   0  (0.0%, 79.1%)   0  (0.0%, 80.0%)  _dl_next_ld_env_entry:./elf/./elf/dl-environ.c

>    353  (0.2%, 93.6%)   3  (0.1%, 73.0%)   3  (0.1%, 73.0%)     9  (0.0%, 93.4%)   0  (0.0%, 92.7%)   0  (0.0%, 94.8%)   321  (2.0%, 90.1%)  41  (6.4%, 85.5%)  41  (6.9%, 87.0%)  _dl_allocate_tls_storage:
     350  (0.2%)          3  (0.1%)          3  (0.1%)            7  (0.0%)          0                  0                  319  (2.0%)         41  (6.4%)         41  (6.9%)           ./elf/../elf/dl-tls.c

>    351  (0.2%, 93.8%)   6  (0.3%, 73.3%)   6  (0.3%, 73.3%)    48  (0.1%, 93.5%)   3  (0.1%, 92.8%)   3  (0.2%, 95.0%)     0  (0.0%, 90.1%)   0  (0.0%, 85.5%)   0  (0.0%, 87.0%)  strlen:
     327  (0.2%)          4  (0.2%)          4  (0.2%)           44  (0.1%)          3  (0.1%)          3  (0.2%)            0                  0                  0                   ./string/../sysdeps/x86_64/multiarch/strlen-vec.S

>    345  (0.2%, 94.0%)  20  (0.9%, 74.1%)  20  (0.9%, 74.2%)    69  (0.2%, 93.6%)   7  (0.3%, 93.1%)   7  (0.5%, 95.5%)    23  (0.1%, 90.2%)   3  (0.5%, 86.0%)   3  (0.5%, 87.5%)  open_verify.constprop.0:
     343  (0.2%)         20  (0.9%)         20  (0.9%)           68  (0.2%)          7  (0.3%)          7  (0.5%)           22  (0.1%)          3  (0.5%)          3  (0.5%)           ./elf/./elf/dl-load.c

>    333  (0.2%, 94.2%)   6  (0.3%, 74.4%)   3  (0.1%, 74.3%)    72  (0.2%, 93.8%)   0  (0.0%, 93.1%)   0  (0.0%, 95.5%)    45  (0.3%, 90.5%)   0  (0.0%, 86.0%)   0  (0.0%, 87.5%)  _IO_file_write@@GLIBC_2.2.5:./libio/./libio/fileops.c

>    313  (0.2%, 94.3%)  18  (0.8%, 75.2%)  18  (0.8%, 75.1%)    64  (0.1%, 94.0%)   8  (0.3%, 93.4%)   8  (0.6%, 96.1%)    37  (0.2%, 90.7%)   3  (0.5%, 86.5%)   3  (0.5%, 88.0%)  _dl_load_cache_lookup:
     293  (0.2%)         16  (0.7%)         16  (0.7%)           62  (0.1%)          7  (0.3%)          7  (0.5%)           34  (0.2%)          2  (0.3%)          2  (0.3%)           ./elf/./elf/dl-cache.c

>    295  (0.2%, 94.5%)   6  (0.3%, 75.4%)   4  (0.2%, 75.3%)    79  (0.2%, 94.1%)   3  (0.1%, 93.5%)   2  (0.1%, 96.2%)    55  (0.3%, 91.1%)  12  (1.9%, 88.4%)  12  (2.0%, 90.0%)  memcpy:./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

>    290  (0.2%, 94.6%)   5  (0.2%, 75.7%)   5  (0.2%, 75.5%)    35  (0.1%, 94.2%)   0  (0.0%, 93.5%)   0  (0.0%, 96.2%)    20  (0.1%, 91.2%)   0  (0.0%, 88.4%)   0  (0.0%, 90.0%)  __GI___tunable_set_val:
     245  (0.1%)          4  (0.2%)          4  (0.2%)           35  (0.1%)          0                  0                   20  (0.1%)          0                  0                   ./elf/./elf/dl-tunables.c

>    284  (0.2%, 94.8%)   6  (0.3%, 75.9%)   3  (0.1%, 75.7%)    93  (0.2%, 94.4%)   3  (0.1%, 93.7%)   0  (0.0%, 96.2%)    48  (0.3%, 91.5%)   0  (0.0%, 88.4%)   0  (0.0%, 90.0%)  dfs_traversal.part.0:./elf/./elf/dl-sort-maps.c

>    273  (0.1%, 94.9%)  12  (0.5%, 76.4%)  12  (0.5%, 76.2%)    77  (0.2%, 94.6%)   2  (0.1%, 93.7%)   0  (0.0%, 96.2%)    39  (0.2%, 91.7%)   1  (0.2%, 88.5%)   0  (0.0%, 90.0%)  _dl_fini:./elf/./elf/dl-fini.c

>    268  (0.1%, 95.1%)   7  (0.3%, 76.7%)   7  (0.3%, 76.5%)    95  (0.2%, 94.8%)   5  (0.2%, 94.0%)   4  (0.3%, 96.5%)    39  (0.2%, 92.0%)   0  (0.0%, 88.5%)   0  (0.0%, 90.0%)  _dl_lookup_direct:./elf/./elf/dl-lookup-direct.c

>    261  (0.1%, 95.2%)   5  (0.2%, 77.0%)   5  (0.2%, 76.8%)    69  (0.2%, 95.0%)   0  (0.0%, 94.0%)   0  (0.0%, 96.5%)    18  (0.1%, 92.1%)   0  (0.0%, 88.5%)   0  (0.0%, 90.0%)  _IO_default_xsputn:
     210  (0.1%)          5  (0.2%)          5  (0.2%)           69  (0.2%)          0                  0                   18  (0.1%)          0                  0                   ./libio/./libio/genops.c

>    258  (0.1%, 95.4%)   5  (0.2%, 77.2%)   5  (0.2%, 77.0%)   123  (0.3%, 95.3%)   2  (0.1%, 94.0%)   2  (0.1%, 96.7%)    34  (0.2%, 92.3%)   4  (0.6%, 89.2%)   4  (0.7%, 90.7%)  strcspn:
     251  (0.1%)          3  (0.1%)          3  (0.1%)          120  (0.3%)          2  (0.1%)          2  (0.1%)           34  (0.2%)          4  (0.6%)          4  (0.7%)           ./string/../sysdeps/x86_64/strcspn.S

>    257  (0.1%, 95.5%)   3  (0.1%, 77.3%)   3  (0.1%, 77.1%)    69  (0.2%, 95.4%)  41  (1.7%, 95.7%)   8  (0.6%, 97.3%)    16  (0.1%, 92.4%)   3  (0.5%, 89.6%)   2  (0.3%, 91.0%)  _dl_find_object_from_map:./elf/./dl-find_object.h

>    254  (0.1%, 95.7%)  20  (0.9%, 78.2%)   9  (0.4%, 77.5%)    60  (0.1%, 95.6%)   2  (0.1%, 95.8%)   0  (0.0%, 97.3%)    28  (0.2%, 92.6%)   0  (0.0%, 89.6%)   0  (0.0%, 91.0%)  _dl_sort_maps:./elf/./elf/dl-sort-maps.c

>    253  (0.1%, 95.8%)  13  (0.6%, 78.7%)  13  (0.6%, 78.1%)    56  (0.1%, 95.7%)  11  (0.4%, 96.2%)  11  (0.8%, 98.1%)    13  (0.1%, 92.6%)   2  (0.3%, 89.9%)   2  (0.3%, 91.4%)  open_verify.constprop.1:
     251  (0.1%)         12  (0.5%)         12  (0.5%)           55  (0.1%)         11  (0.4%)         11  (0.8%)           12  (0.1%)          2  (0.3%)          2  (0.3%)           ./elf/./elf/dl-load.c

>    219  (0.1%, 95.9%)  13  (0.6%, 79.3%)  13  (0.6%, 78.7%)    20  (0.0%, 95.8%)   0  (0.0%, 96.2%)   0  (0.0%, 98.1%)    16  (0.1%, 92.7%)   0  (0.0%, 89.9%)   0  (0.0%, 91.4%)  get_common_cache_info.constprop.0:./elf/../sysdeps/x86/dl-cacheinfo.h

>    196  (0.1%, 96.0%)  21  (0.9%, 80.2%)  21  (1.0%, 79.7%)    47  (0.1%, 95.9%)   2  (0.1%, 96.3%)   1  (0.1%, 98.2%)    31  (0.2%, 92.9%)   2  (0.3%, 90.3%)   2  (0.3%, 91.7%)  sysmalloc:
     195  (0.1%)         20  (0.9%)         20  (0.9%)           47  (0.1%)          2  (0.1%)          1  (0.1%)           30  (0.2%)          2  (0.3%)          2  (0.3%)           ./malloc/./malloc/malloc.c

>    192  (0.1%, 96.1%)   7  (0.3%, 80.5%)   7  (0.3%, 80.0%)    68  (0.2%, 96.0%)   7  (0.3%, 96.6%)   1  (0.1%, 98.2%)    20  (0.1%, 93.0%)   1  (0.2%, 90.4%)   0  (0.0%, 91.7%)  _dl_fixup:
     188  (0.1%)          7  (0.3%)          7  (0.3%)           68  (0.2%)          7  (0.3%)          1  (0.1%)           18  (0.1%)          1  (0.2%)          0                   ./elf/./elf/dl-runtime.c

>    188  (0.1%, 96.2%)   2  (0.1%, 80.6%)   1  (0.0%, 80.1%)     0  (0.0%, 96.0%)   0  (0.0%, 96.6%)   0  (0.0%, 98.2%)     0  (0.0%, 93.0%)   0  (0.0%, 90.4%)   0  (0.0%, 91.7%)  __mempcpy_avx_unaligned_erms:./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../bits/stdlib-bsearch.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../bits/stdlib-bsearch.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../elf/dl-sysdep.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../elf/dl-sysdep.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../elf/dl-tls.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../elf/dl-tls.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-protected.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-protected.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/ldsodefs.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/ldsodefs.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/x86/dl-cacheinfo.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/x86/dl-cacheinfo.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/x86/dl-prop.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/x86/dl-prop.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/x86_64/dl-machine.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/x86_64/dl-machine.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./dl-find_object.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./dl-find_object.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./dl-map-segments.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./dl-map-segments.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-cache.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-cache.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-deps.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-deps.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-environ.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-environ.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-fini.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-fini.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-hwcaps.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-hwcaps.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-hwcaps_split.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-hwcaps_split.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-load.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-load.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-lookup-direct.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-lookup-direct.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-minimal-malloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-minimal-malloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-misc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-misc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-object.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-object.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-reloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-reloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-runtime.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-runtime.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-sort-maps.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-sort-maps.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-tunables.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-tunables.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-tunables.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-tunables.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-version.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-version.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/do-rel.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/do-rel.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/get-dynamic-info.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/get-dynamic-info.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/rtld.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/rtld.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./get-dynamic-info.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./get-dynamic-info.h

--------------------------------------------------------------------------------
-- Annotated source file: ./libio/./libio/fileops.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./libio/./libio/fileops.c

--------------------------------------------------------------------------------
-- Annotated source file: ./libio/./libio/genops.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./libio/./libio/genops.c

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/malloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/malloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdio-common/../libio/libioP.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdio-common/../libio/libioP.h

--------------------------------------------------------------------------------
-- Annotated source file: ./stdio-common/./stdio-common/_itoa.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdio-common/./stdio-common/_itoa.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdio-common/./stdio-common/printf.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdio-common/./stdio-common/printf.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdio-common/./stdio-common/vfprintf-internal.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdio-common/./stdio-common/vfprintf-internal.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/../stdlib/strtol_l.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/../stdlib/strtol_l.c

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/../strchr.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/../strchr.S

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/multiarch/strlen-vec.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/multiarch/strlen-vec.S

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/strcmp.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
-- Annotated source file: ./string/../sysdeps/x86_64/strcspn.S
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./string/../sysdeps/x86_64/strcspn.S

--------------------------------------------------------------------------------
-- Annotated source file: /home/spectre/Documents/The-UNSHARED-Spectre/PrimeProbe/primeprobe.c
--------------------------------------------------------------------------------
Ir_______ I1mr____ ILmr____ Dr_______ D1mr____ DLmr____ Dw______ D1mw____ DLmw 

-- line 10 ----------------------------------------
 .        .        .         .        .        .        .        .           .  #define VICTIM_ARRAY_SIZE 4096
 .        .        .         .        .        .        .        .           .  #define ATTACKER_ARRAY_SIZE 1024
 .        .        .         .        .        .        .        .           .  #define PRIMING_ITERS 100
 .        .        .         .        .        .        .        .           .  int cache_size,number_of_sets,number_of_ways,line_size;
 .        .        .         .        .        .        .        .           .  int temp;
 .        .        .         .        .        .        .        .           .  char* attacker_array;
 .        .        .         .        .        .        .        .           .  char* victim_array;
 .        .        .         .        .        .        .        .           .  
 4 (0.0%) 0        0         0        0        0        2 (0.0%) 0           0  void prime_cache_set(int n){
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 1 (0.1%) 1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 1 (0.1%) 1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 1 (0.1%) 1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 1 (0.1%) 1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 1 (0.1%) 1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 1 (0.1%) 1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 1 (0.1%) 1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 1 (0.1%) 1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 1 (0.0%) 1 (0.0%)  0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 1 (0.0%) 1 (0.0%)  0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 1 (0.0%) 1 (0.0%)  0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 1 (0.0%) 1 (0.0%)  0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 1 (0.0%) 1 (0.0%)  0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 192 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 237 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 738 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 963 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 868 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 792 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 2 (0.1%) 2 (0.1%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 479 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
20 (0.0%) 1 (0.0%) 1 (0.0%)  5 (0.0%) 1 (0.0%) 0        1 (0.0%) 0           0  		temp += attacker_array[4096*(( 592 + (n>>6))%ATTACKER_ARRAY_SIZE) + n];
 1 (0.0%) 0        0         0        0        0        0        0           0  		asm("lfence");
 3 (0.0%) 0        0         2 (0.0%) 0        0        0        0           0  }
 .        .        .         .        .        .        .        .           .  
 .        .        .         .        .        .        .        .           .  unsigned long long rdtsc() {
 .        .        .         .        .        .        .        .           .  	unsigned long long a, d;
 .        .        .         .        .        .        .        .           .  	asm volatile ("mfence");
 .        .        .         .        .        .        .        .           .  	asm volatile ("rdtsc" : "=a" (a), "=d" (d));
 .        .        .         .        .        .        .        .           .  	a = (d<<32) | a;
 .        .        .         .        .        .        .        .           .  	asm volatile ("mfence");
 .        .        .         .        .        .        .        .           .  	return a;
-- line 945 ----------------------------------------
-- line 975 ----------------------------------------
 .        .        .         .        .        .        .        .           .  	for(int i=0; i<8; ++i){
 .        .        .         .        .        .        .        .           .  		printf("Set %d: %llu\n", i, timer[i]);
 .        .        .         .        .        .        .        .           .  	}
 .        .        .         .        .        .        .        .           .  }
 .        .        .         .        .        .        .        .           .  
 .        .        .         .        .        .        .        .           .  extern void probe_asm(char* attacker_array, long long * times,int n);
 .        .        .         .        .        .        .        .           .  
 .        .        .         .        .        .        .        .           .  
 7 (0.0%) 1 (0.0%) 1 (0.0%)  1 (0.0%) 0        0        2 (0.0%) 0           0  int main(){
 6 (0.0%) 0        0         0        0        0        2 (0.0%) 0           0  	int fd = open("/sys/devices/system/cpu/cpu0/cache/index0/size", O_RDONLY);	
 .        .        .         .        .        .        .        .           .  	char buf[10];
 1 (0.0%) 1 (0.0%) 1 (0.0%)  0        0        0        1 (0.0%) 0           0  	int i = -1;
 .        .        .         .        .        .        .        .           .  	do{
 3 (0.0%) 0        0         3 (0.0%) 0        0        0        0           0  		i++;
27 (0.0%) 0        0         6 (0.0%) 0        0        3 (0.0%) 0           0  		read(fd, buf+i, 1);
 .        .        .         .        .        .        .        .           .  	}
15 (0.0%) 0        0         6 (0.0%) 0        0        0        0           0  	while(buf[i] != 'K');
 3 (0.0%) 0        0         1 (0.0%) 0        0        1 (0.0%) 0           0  	buf[i] = '\0';
 5 (0.0%) 1 (0.0%) 1 (0.0%)  0        0        0        2 (0.0%) 1 (0.2%)    0  	cache_size = atoi(buf)*1024;
 6 (0.0%) 0        0         1 (0.0%) 0        0        1 (0.0%) 0           0  	printf("Cache size: %d\n", cache_size);
 .        .        .         .        .        .        .        .           .  
 .        .        .         .        .        .        .        .           .  	
 6 (0.0%) 1 (0.0%) 1 (0.0%)  0        0        0        2 (0.0%) 0           0  	fd = open("/sys/devices/system/cpu/cpu0/cache/index0/number_of_sets", O_RDONLY);	
 1 (0.0%) 0        0         0        0        0        1 (0.0%) 0           0  	i = -1;
 .        .        .         .        .        .        .        .           .  	do{
 4 (0.0%) 0        0         4 (0.0%) 0        0        0        0           0  		i++;
36 (0.0%) 0        0         8 (0.0%) 0        0        4 (0.0%) 0           0  		read(fd, buf+i, 1);
 .        .        .         .        .        .        .        .           .  	}
20 (0.0%) 1 (0.0%) 1 (0.0%)  8 (0.0%) 0        0        0        0           0  	while(buf[i] != '\0');
 3 (0.0%) 0        0         1 (0.0%) 0        0        1 (0.0%) 0           0  	buf[i] = '\0';
 4 (0.0%) 0        0         0        0        0        2 (0.0%) 0           0  	number_of_sets = atoi(buf);
 6 (0.0%) 0        0         1 (0.0%) 0        0        1 (0.0%) 0           0  	printf("Number of sets: %d\n", number_of_sets);
 .        .        .         .        .        .        .        .           .  
 .        .        .         .        .        .        .        .           .  
 6 (0.0%) 1 (0.0%) 1 (0.0%)  0        0        0        2 (0.0%) 0           0  	fd = open("/sys/devices/system/cpu/cpu0/cache/index0/ways_of_associativity", O_RDONLY);	
 1 (0.0%) 0        0         0        0        0        1 (0.0%) 0           0  	i = -1;
 .        .        .         .        .        .        .        .           .  	do{
 4 (0.0%) 0        0         4 (0.0%) 0        0        0        0           0  		i++;
36 (0.0%) 1 (0.0%) 1 (0.0%)  8 (0.0%) 0        0        4 (0.0%) 0           0  		read(fd, buf+i, 1);
 .        .        .         .        .        .        .        .           .  	}
20 (0.0%) 0        0         8 (0.0%) 0        0        0        0           0  	while(buf[i] != '\0');
 3 (0.0%) 0        0         1 (0.0%) 0        0        1 (0.0%) 0           0  	buf[i] = '\0';
 4 (0.0%) 0        0         0        0        0        2 (0.0%) 0           0  	number_of_ways = atoi(buf);
 6 (0.0%) 1 (0.0%) 1 (0.0%)  1 (0.0%) 0        0        1 (0.0%) 0           0  	printf("Number of ways: %d\n", number_of_ways);
 .        .        .         .        .        .        .        .           .  
 .        .        .         .        .        .        .        .           .  
 6 (0.0%) 0        0         0        0        0        2 (0.0%) 0           0  	fd = open("/sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size", O_RDONLY);	
 1 (0.0%) 0        0         0        0        0        1 (0.0%) 0           0  	i = -1;
 .        .        .         .        .        .        .        .           .  	do{
 4 (0.0%) 0        0         4 (0.0%) 0        0        0        0           0  		i++;
36 (0.0%) 1 (0.0%) 1 (0.0%)  8 (0.0%) 0        0        4 (0.0%) 0           0  		read(fd, buf+i, 1);
 .        .        .         .        .        .        .        .           .  	}
20 (0.0%) 0        0         8 (0.0%) 0        0        0        0           0  	while(buf[i] != '\0');
 3 (0.0%) 0        0         1 (0.0%) 0        0        1 (0.0%) 0           0  	buf[i] = '\0';
 4 (0.0%) 0        0         0        0        0        2 (0.0%) 0           0  	line_size = atoi(buf);
 6 (0.0%) 1 (0.0%) 1 (0.0%)  1 (0.0%) 0        0        1 (0.0%) 0           0  	printf("Line size: %d\n", line_size);
 .        .        .         .        .        .        .        .           .  
 8 (0.0%) 0        0         4 (0.0%) 0        0        0        0           0  	assert(number_of_ways*number_of_sets*line_size == cache_size);
 .        .        .         .        .        .        .        .           .  	
 3 (0.0%) 1 (0.0%) 1 (0.0%)  0        0        0        2 (0.0%) 0           0  	attacker_array = (char*)malloc(ATTACKER_ARRAY_SIZE*4096*sizeof(int));
 3 (0.0%) 0        0         0        0        0        2 (0.0%) 0           0  	victim_array = (char*)malloc(VICTIM_ARRAY_SIZE*sizeof(int));
 .        .        .         .        .        .        .        .           .  		
 9 (0.0%) 1 (0.0%) 1 (0.0%)  2 (0.0%) 0        0        1 (0.0%) 0           0  	printf("Attacker array: %p %lu\n", attacker_array, ((unsigned long)attacker_array)%4096 );
 9 (0.0%) 1 (0.0%) 1 (0.0%)  2 (0.0%) 0        0        1 (0.0%) 0           0  	printf("Victim array: %p %lu\n", victim_array, ((unsigned long)victim_array)%4096 );
 .        .        .         .        .        .        .        .           .  
 4 (0.0%) 0        0         1 (0.0%) 0        0        1 (0.0%) 0           0  	attacker_array = (char*)((unsigned long)attacker_array + 4096 - ((unsigned long)attacker_array)%4096);
 4 (0.0%) 1 (0.0%) 1 (0.0%)  1 (0.0%) 0        0        1 (0.0%) 0           0  	victim_array = (char*)((unsigned long)victim_array + 4096 - ((unsigned long)victim_array)%4096);
 .        .        .         .        .        .        .        .           .  
 9 (0.0%) 0        0         2 (0.0%) 0        0        1 (0.0%) 0           0  	printf("Attacker array: %p %lu\n", attacker_array, ((unsigned long)attacker_array)%4096 );
 9 (0.0%) 1 (0.0%) 1 (0.0%)  2 (0.0%) 0        0        1 (0.0%) 0           0  	printf("Victim array: %p %lu\n", victim_array, ((unsigned long)victim_array)%4096 );
 .        .        .         .        .        .        .        .           .  
 1 (0.0%) 0        0         0        0        0        1 (0.0%) 0           0  	int n = 0;
 3 (0.0%) 0        0         1 (0.0%) 0        0        1 (0.0%) 0           0  	prime_cache_set(n);
 .        .        .         .        .        .        .        .           .  	// temp = victim_array[(((n>>6))<<6)];
 .        .        .         .        .        .        .        .           .  	long long times[8];
 6 (0.0%) 2 (0.1%) 1 (0.0%)  2 (0.0%) 0        0        1 (0.0%) 0           0  	probe_asm(&attacker_array[0], times, n);
28 (0.0%) 0        0        17 (0.0%) 0        0        1 (0.0%) 0           0  	for(int i=0;i<8;i++){
72 (0.0%) 0        0        16 (0.0%) 0        0        8 (0.0%) 0           0  		printf("%lld ",-1*times[i]);
 .        .        .         .        .        .        .        .           .  	}
 3 (0.0%) 0        0         0        0        0        1 (0.0%) 0           0  	printf("\n");
 5 (0.0%) 0        0         4 (0.0%) 0        0        0        0           0  }

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir_____________ I1mr_________ ILmr_______ Dr____________ D1mr_________ DLmr_________ Dw____________ D1mw_______ DLmw_______ 

 16,918  (9.2%)   864 (37.5%) 863 (39.4%)  4,220  (9.8%)   816 (33.3%)     8  (0.6%)    886  (5.4%)   1  (0.2%)   0            annotated: files known & above threshold & readable, line numbers known
      0             0           0              0             0             0              0           0           0            annotated: files known & above threshold & readable, line numbers unknown
      0             0           0              0             0             0              0           0           0          unannotated: files known & above threshold & two or more non-identical
160,144 (87.3%) 1,004 (43.6%) 915 (41.8%) 37,080 (86.5%) 1,560 (63.8%) 1,329 (98.0%) 14,443 (88.7%) 592 (93.1%) 559 (94.6%)  unannotated: files known & above threshold & unreadable 
  6,065  (3.3%)   395 (17.1%) 386 (17.6%)  1,405  (3.3%)    66  (2.7%)    19  (1.4%)    933  (5.7%)  42  (6.6%)  31  (5.2%)  unannotated: files known & below threshold
    386  (0.2%)    41  (1.8%)  27  (1.2%)    182  (0.4%)     5  (0.2%)     0             18  (0.1%)   1  (0.2%)   1  (0.2%)  unannotated: files unknown

